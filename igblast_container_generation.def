Bootstrap: docker
From: ubuntu:latest

%labels
    Maintainer "AI Assistant"
    Version "2.5" # Ensured script is executable in %post

%environment
    # Arguments for customization (runtime environment)
    export RAW_SPECIES="Homo sapiens" # Original species name with spaces
    export IGBLAST_VERSION="1.22.0"
    export OGRDB_BASE_DIR="/opt/ogrdb_references"
    export IGBLAST_INSTALL_DIR="/opt/ncbi-igblast"

    # Sanitized species name for filenames and DB names (used by runtime script)
    export BUILT_SPECIES=$(echo "${RAW_SPECIES}" | sed 's/ /_/g') # e.g., Homo_sapiens

    # Set environment variables to avoid interactive prompts
    export DEBIAN_FRONTEND=noninteractive

    # Set IgBlast specific environment variables for runtime
    export IGBLAST_DIR=${IGBLAST_INSTALL_DIR}/${IGBLAST_VERSION}
    export PATH=${IGBLAST_DIR}/bin:${PATH} # For runtime
    export IGDATA=${IGBLAST_DIR} 

    export OGRDB_SPECIES_DIR="${OGRDB_BASE_DIR}/${BUILT_SPECIES}" # Path now uses underscored species
    export OGRDB_COMBINED_DIR="${OGRDB_SPECIES_DIR}/OGRDB_Combined"

    # Set a working directory for mounted data at runtime
    export SINGULARITY_WORKDIR="/data"

%post
    # Define variables needed during the BUILD process explicitly.
    BUILD_RAW_SPECIES="Homo sapiens"
    BUILD_SPECIES_FN=$(echo "${BUILD_RAW_SPECIES}" | sed 's/ /_/g') # Sanitized for filenames

    BUILD_IGBLAST_VERSION="1.22.0"
    BUILD_OGRDB_BASE_DIR="/opt/ogrdb_references"
    BUILD_IGBLAST_INSTALL_DIR="/opt/ncbi-igblast"
    BUILD_IGBLAST_DIR="${BUILD_IGBLAST_INSTALL_DIR}/${BUILD_IGBLAST_VERSION}"
    
    BUILD_OGRDB_SPECIES_DIR="${BUILD_OGRDB_BASE_DIR}/${BUILD_SPECIES_FN}"
    BUILD_OGRDB_COMBINED_DIR="${BUILD_OGRDB_SPECIES_DIR}/OGRDB_Combined"

    # Add IgBLAST (and BLAST+) binaries to PATH for the %post script environment
    export PATH="${BUILD_IGBLAST_DIR}/bin:${PATH}"

    echo "Build-time variables set:"
    echo "  BUILD_RAW_SPECIES: ${BUILD_RAW_SPECIES}"
    echo "  BUILD_SPECIES_FN (for paths/filenames): ${BUILD_SPECIES_FN}"
    echo "  BUILD_IGBLAST_VERSION: ${BUILD_IGBLAST_VERSION}"
    echo "  BUILD_IGBLAST_DIR: ${BUILD_IGBLAST_DIR}"
    echo "  BUILD_OGRDB_COMBINED_DIR: ${BUILD_OGRDB_COMBINED_DIR}"
    echo "  Build-time PATH updated to: ${PATH}"

    echo "Starting package installation..."
    apt-get update -qq
    apt-get install -y --no-install-recommends \
        wget \
        tar \
        gzip \
        python3 \
        python3-pip \
        python3-venv \
        ca-certificates \
        build-essential \
        gawk
    apt-get clean
    rm -rf /var/lib/apt/lists/*
    echo "Package installation complete."

    echo "Installing IgBlast version ${BUILD_IGBLAST_VERSION} to ${BUILD_IGBLAST_DIR}..."
    mkdir -p "${BUILD_IGBLAST_DIR}"
    cd /tmp
    wget --quiet "https://ftp.ncbi.nih.gov/blast/executables/igblast/release/${BUILD_IGBLAST_VERSION}/ncbi-igblast-${BUILD_IGBLAST_VERSION}-x64-linux.tar.gz" -O ncbi-igblast.tar.gz || \
    wget --quiet "https://ftp.ncbi.nih.gov/blast/executables/igblast/release/LATEST/ncbi-igblast-${BUILD_IGBLAST_VERSION}-x64-linux.tar.gz" -O ncbi-igblast.tar.gz
    tar -zxvf ncbi-igblast.tar.gz -C "${BUILD_IGBLAST_DIR}" --strip-components=1
    rm ncbi-igblast.tar.gz
    echo "IgBlast installation complete."

    echo "Installing receptor-utils..."
    pip3 install --no-cache-dir --quiet --break-system-packages receptor-utils
    echo "receptor-utils installation complete."

    echo "Creating OGRDB combined directory for species ${BUILD_SPECIES_FN} at ${BUILD_OGRDB_COMBINED_DIR}..."
    mkdir -p "${BUILD_OGRDB_COMBINED_DIR}"
    echo "OGRDB combined directory creation complete."

    echo "Downloading and combining OGRDB reference sequences for ${BUILD_RAW_SPECIES} (using ${BUILD_SPECIES_FN} for filenames)..."

    BUILD_COMBINED_V_FASTA_FILENAME="${BUILD_SPECIES_FN}_OGRDB_V.fasta"
    BUILD_COMBINED_J_FASTA_FILENAME="${BUILD_SPECIES_FN}_OGRDB_J.fasta"
    BUILD_COMBINED_D_FASTA_FILENAME="${BUILD_SPECIES_FN}_OGRDB_D.fasta"

    BUILD_COMBINED_V_FASTA_FULLPATH="${BUILD_OGRDB_COMBINED_DIR}/${BUILD_COMBINED_V_FASTA_FILENAME}"
    BUILD_COMBINED_J_FASTA_FULLPATH="${BUILD_OGRDB_COMBINED_DIR}/${BUILD_COMBINED_J_FASTA_FILENAME}"
    BUILD_COMBINED_D_FASTA_FULLPATH="${BUILD_OGRDB_COMBINED_DIR}/${BUILD_COMBINED_D_FASTA_FILENAME}"

    > "${BUILD_COMBINED_V_FASTA_FULLPATH}"
    > "${BUILD_COMBINED_J_FASTA_FULLPATH}"
    > "${BUILD_COMBINED_D_FASTA_FULLPATH}"

    TEMP_IGH_DL_PREFIX="${BUILD_OGRDB_COMBINED_DIR}/temp_${BUILD_SPECIES_FN}_IGH"
    TEMP_IGK_DL_PREFIX="${BUILD_OGRDB_COMBINED_DIR}/temp_${BUILD_SPECIES_FN}_IGK"
    TEMP_IGL_DL_PREFIX="${BUILD_OGRDB_COMBINED_DIR}/temp_${BUILD_SPECIES_FN}_IGL"

    TEMP_IGH_FASTA="${TEMP_IGH_DL_PREFIX}gapped.fasta"
    TEMP_IGK_FASTA="${TEMP_IGK_DL_PREFIX}gapped.fasta"
    TEMP_IGL_FASTA="${TEMP_IGL_DL_PREFIX}gapped.fasta"

    echo "Downloading IGH locus for ${BUILD_RAW_SPECIES}..."
    download_germline_set "${BUILD_RAW_SPECIES}" IGH -f SINGLE-FU -p "${TEMP_IGH_DL_PREFIX}"
    echo "Downloading IGK locus for ${BUILD_RAW_SPECIES}..."
    download_germline_set "${BUILD_RAW_SPECIES}" IGK -f SINGLE-FU -p "${TEMP_IGK_DL_PREFIX}"
    echo "Downloading IGL locus for ${BUILD_RAW_SPECIES}..."
    download_germline_set "${BUILD_RAW_SPECIES}" IGL -f SINGLE-FU -p "${TEMP_IGL_DL_PREFIX}"

    echo "Parsing and combining V, D, J genes..."
    for locus_file in "${TEMP_IGH_FASTA}" "${TEMP_IGK_FASTA}" "${TEMP_IGL_FASTA}"; do
        if [ -f "${locus_file}" ]; then
            echo "Processing ${locus_file}..."
            awk 'BEGIN {RS = ">" ; FS = "\n" ; ORS = ""} NR > 0 {header = $1; sequence = ""; for (i=2; i<=NF; i++) sequence = sequence $i; if (header ~ /^IGHV/ || header ~ /^IGKV/ || header ~ /^IGLV/) { print ">"header"\n"sequence"\n" } }' "${locus_file}" >> "${BUILD_COMBINED_V_FASTA_FULLPATH}"
            awk 'BEGIN {RS = ">" ; FS = "\n" ; ORS = ""} NR > 0 {header = $1; sequence = ""; for (i=2; i<=NF; i++) sequence = sequence $i; if (header ~ /^IGHD/) { print ">"header"\n"sequence"\n" } }' "${locus_file}" >> "${BUILD_COMBINED_D_FASTA_FULLPATH}"
            awk 'BEGIN {RS = ">" ; FS = "\n" ; ORS = ""} NR > 0 {header = $1; sequence = ""; for (i=2; i<=NF; i++) sequence = sequence $i; if (header ~ /^IGHJ/ || header ~ /^IGKJ/ || header ~ /^IGLJ/) { print ">"header"\n"sequence"\n" } }' "${locus_file}" >> "${BUILD_COMBINED_J_FASTA_FULLPATH}"
            rm "${locus_file}"
        else
            echo "Warning: Locus file ${locus_file} not found after download attempt."
        fi
    done
    echo "OGRDB download and combination complete."

    echo "Preparing BLAST databases from combined OGRDB FASTA files..."
    ORIGINAL_PWD=$(pwd)
    cd "${BUILD_OGRDB_COMBINED_DIR}"

    if [ -s "${BUILD_COMBINED_V_FASTA_FILENAME}" ]; then 
        DB_V_OUT_BASENAME=$(basename "${BUILD_COMBINED_V_FASTA_FILENAME}" .fasta)
        echo "Creating BLAST DB for V genes. Input: ${BUILD_COMBINED_V_FASTA_FILENAME}, Output base in current dir: ${DB_V_OUT_BASENAME}"
        makeblastdb -in "${BUILD_COMBINED_V_FASTA_FILENAME}" -dbtype nucl -parse_seqids -out "${DB_V_OUT_BASENAME}"
    else 
        echo "Warning: ${BUILD_COMBINED_V_FASTA_FILENAME} is empty or not found. Skipping makeblastdb."
    fi

    if [ -s "${BUILD_COMBINED_J_FASTA_FILENAME}" ]; then 
        DB_J_OUT_BASENAME=$(basename "${BUILD_COMBINED_J_FASTA_FILENAME}" .fasta)
        echo "Creating BLAST DB for J genes. Input: ${BUILD_COMBINED_J_FASTA_FILENAME}, Output base in current dir: ${DB_J_OUT_BASENAME}"
        makeblastdb -in "${BUILD_COMBINED_J_FASTA_FILENAME}" -dbtype nucl -parse_seqids -out "${DB_J_OUT_BASENAME}"
    else 
        echo "Warning: ${BUILD_COMBINED_J_FASTA_FILENAME} is empty or not found. Skipping makeblastdb."
    fi

    if [ -s "${BUILD_COMBINED_D_FASTA_FILENAME}" ]; then 
        DB_D_OUT_BASENAME=$(basename "${BUILD_COMBINED_D_FASTA_FILENAME}" .fasta)
        echo "Creating BLAST DB for D genes. Input: ${BUILD_COMBINED_D_FASTA_FILENAME}, Output base in current dir: ${DB_D_OUT_BASENAME}"
        makeblastdb -in "${BUILD_COMBINED_D_FASTA_FILENAME}" -dbtype nucl -parse_seqids -out "${DB_D_OUT_BASENAME}"
    else 
        echo "Warning: ${BUILD_COMBINED_D_FASTA_FILENAME} is empty or not found. Skipping makeblastdb."
    fi
    
    cd "${ORIGINAL_PWD}" 
    echo "BLAST database preparation complete."

    # The run_igblast_custom.sh script is copied by %files.
    # Explicitly set execute permissions here in %post as a safeguard.
    # The file path /usr/local/bin/run_igblast_custom.sh is where %files copies it.
    if [ -f /usr/local/bin/run_igblast_custom.sh ]; then
       chmod +x /usr/local/bin/run_igblast_custom.sh
       echo "Permissions explicitly set for /usr/local/bin/run_igblast_custom.sh in %post."
    else
       # This case should ideally not happen if %files is correctly defined and the source file exists.
       echo "Warning: /usr/local/bin/run_igblast_custom.sh not found in %post to set permissions."
       echo "Ensure 'run_igblast_custom.sh' is in your build context and %files section is correct."
    fi

    mkdir -p /data 
    echo "Singularity setup complete. Current date: $(date)"

%files
    # Copy the entrypoint script into the image
    # Source path is relative to the build context (where you run `singularity build`)
    # Destination path is inside the container
    run_igblast_custom.sh /usr/local/bin/run_igblast_custom.sh

%runscript
    # This script executes when the container is run.
    # The environment variables from %environment are available here.
    echo "Executing run_igblast_custom.sh with arguments: $@"
    # The check for executability is still useful for debugging, but %post should now handle it.
    if [ ! -x /usr/local/bin/run_igblast_custom.sh ]; then
        echo "Error: /usr/local/bin/run_igblast_custom.sh is not executable despite %post chmod."
        echo "This indicates a deeper issue with the build or filesystem permissions."
        exit 1
    fi
    
    if [ $# -eq 0 ]; then
        /usr/local/bin/run_igblast_custom.sh --help
    else
        /usr/local/bin/run_igblast_custom.sh "$@"
    fi

